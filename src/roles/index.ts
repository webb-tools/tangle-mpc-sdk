import { KeyringPair } from "@polkadot/keyring/types";

import { getTangleApi } from "../api";
import { Profile } from "../types";
import { getTxPromise } from "../utils/tx";
import { convertToValidApiParam } from "./utils";

/**
 * CreateProfile on Roles pallet
 *
 * @param keyRingPair The keyring pair to sign the transaction (must be generated by the users
 * using polkadot-js)
 * @param profile The details needed for creating profile
 * @param maxActiveServices The maximum number of active services
 */
export async function createProfile(
  keyRingPair: KeyringPair,
  profile: Profile,
  maxActiveServices: number | null,
) {
  const api = await getTangleApi();

  const createProfileTx = api.tx.roles.createProfile(
    convertToValidApiParam(profile),
    maxActiveServices,
  );

  const hash = await getTxPromise(keyRingPair, createProfileTx);

  return hash;
}

/**
 * DeleteProfile on Roles pallet
 */
export async function deleteProfile(keyRingPair: KeyringPair) {
  const api = await getTangleApi();

  const deleteProfileTx = api.tx.roles.deleteProfile();

  const hash = await getTxPromise(keyRingPair, deleteProfileTx);

  return hash;
}

/**
 * UpdateProfile on Roles pallet
 *
 * @param keyRingPair The keyring pair to sign the transaction (must be generated by the users
 * using polkadot-js)
 * @param profile The details needed for creating profile
 */
export async function updateProfile(
  keyRingPair: KeyringPair,
  profile: Profile,
) {
  const api = await getTangleApi();

  const updateProfileTx = api.tx.roles.updateProfile(
    convertToValidApiParam(profile),
  );

  const hash = await getTxPromise(keyRingPair, updateProfileTx);

  return hash;
}

// TODO: add tests for all the functions
/**
 * The class to allow users to perform tx on Roles Pallet on Tangle Network
 */
export class RolesPallet {
  private readonly keyRingPair: KeyringPair;

  constructor(keyRingPair: KeyringPair) {
    this.keyRingPair = keyRingPair;
  }

  public async createProfile(
    profile: Profile,
    maxActiveServices: number | null,
  ) {
    return createProfile(this.keyRingPair, profile, maxActiveServices);
  }

  public async deleteProfile() {
    return deleteProfile(this.keyRingPair);
  }

  public async updateProfile(profile: Profile) {
    return updateProfile(this.keyRingPair, profile);
  }
}
