/**
 * Extends an existing object with the additional function if they
 * are not already existing.
 */
export function enhanceObj(obj, extra) {
    Object
        .entries(extra)
        .forEach(([key, value]) => {
        var _a;
        (_a = obj)[key] ?? (_a[key] = value);
    });
    return obj;
}
/**
 * @internal
 *
 * A helper to create a stub object based wite the stub creator supplied
 */
function createStub(keys, creator) {
    return keys.reduce((obj, key) => {
        obj[key] ?? (obj[key] = creator(key));
        return obj;
    }, {});
}
/**
 * Extends a given object with the named functions if they do not
 * already exist on the object.
 *
 * @type {StubObjFn}
 */
export function stubObj(objName, keys, alts) {
    return createStub(keys, (key) => () => {
        const alt = alts?.[key];
        throw new Error(`${objName}.${key} has not been implemented${alt ? ` (Use ${alt} instead)` : ''}`);
    });
}
/**
 * Extends a given object with the named functions if they do not
 * already exist on the object.
 *
 * @type {StubObjFn}
 */
export function warnObj(objName, keys) {
    return createStub(keys, (key) => () => {
        console.warn(`${objName}.${key} has been implemented as a noop`);
    });
}
