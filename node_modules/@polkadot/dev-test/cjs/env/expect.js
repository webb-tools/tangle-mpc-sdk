"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expect = void 0;
const node_assert_1 = require("node:assert");
const util_js_1 = require("../util.js");
const EXPECT_KEYS = ['addEqualityTesters', 'addSnapshotSerializer', 'any', 'anything', 'arrayContaining', 'assertions', 'closeTo', 'extend', 'extractExpectedAssertionsErrors', 'getState', 'hasAssertions', 'not', 'objectContaining', 'setState', 'stringContaining', 'stringMatching', 'toMatchInlineSnapshot', 'toMatchSnapshot', 'toThrowErrorMatchingInlineSnapshot', 'toThrowErrorMatchingSnapshot'];
const EXPECT_KEYS_FN = ['lastCalledWith', 'lastReturnedWith', 'not', 'nthCalledWith', 'nthReturnedWith', 'rejects', 'resolves', 'toBe', 'toBeCalled', 'toBeCalledTimes', 'toBeCalledWith', 'toBeCloseTo', 'toBeDefined', 'toBeFalsy', 'toBeGreaterThan', 'toBeGreaterThanOrEqual', 'toBeInstanceOf', 'toBeLessThan', 'toBeLessThanOrEqual', 'toBeNaN', 'toBeNull', 'toBeTruthy', 'toBeUndefined', 'toContain', 'toContainEqual', 'toEqual', 'toHaveBeenCalled', 'toHaveBeenCalledTimes', 'toHaveBeenCalledWith', 'toHaveBeenLastCalledWith', 'toHaveBeenNthCalledWith', 'toHaveLastReturnedWith', 'toHaveLength', 'toHaveNthReturnedWith', 'toHaveProperty', 'toHaveReturned', 'toHaveReturnedTimes', 'toHaveReturnedWith', 'toMatch', 'toMatchInlineSnapshot', 'toMatchObject', 'toMatchSnapshot', 'toReturn', 'toReturnTimes', 'toReturnWith', 'toStrictEqual', 'toThrow', 'toThrowError', 'toThrowErrorMatchingInlineSnapshot', 'toThrowErrorMatchingSnapshot'];
const stubExpect = (0, util_js_1.stubObj)('expect', EXPECT_KEYS);
const stubExpectFn = (0, util_js_1.stubObj)('expect(...)', EXPECT_KEYS_FN, {
    toThrowError: 'expect(...).toThrow'
});
const stubExpectFnRejects = (0, util_js_1.stubObj)('expect(...).rejects', EXPECT_KEYS_FN, {
    toThrowError: 'expect(...).rejects.toThrow'
});
const stubExpectFnResolves = (0, util_js_1.stubObj)('expect(...).resolves', EXPECT_KEYS_FN);
const stubExpectFnNot = (0, util_js_1.stubObj)('expect(...).not', EXPECT_KEYS_FN, {
    toBeFalsy: 'expect(...).toBeTruthy',
    toBeTruthy: 'expect(...).toBeFalsy',
    toThrowError: 'expect(...).not.toThrow'
});
/**
 * @internal
 *
 * A helper that wraps a matching function in an ExpectMatcher. This is (currently)
 * only used/checked for in the calledWith* helpers
 *
 * TODO We don't use it in polkadot-js, but a useful enhancement could be for
 * any of the to* expectations to detect and use those. An example of useful code
 * in that case:
 *
 * ```js
 * expect({
 *   a: 'blah',
 *   b: 3
 * }).toEqual(
 *   expect.objectContaining({ b: 3 })
 * )
 * ```
 *
 * An example of matcher use can be seen in the isCalledWith loops
 */
class Matcher {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(assertFn, check) {
        this.assertMatch = (value) => assertFn(value, check);
    }
}
/**
 * @internal
 *
 * Asserts that the input value is non-nullish
 */
function assertNonNullish(value) {
    node_assert_1.strict.ok(value !== null && value !== undefined, `Expected non-nullish value, found ${value}`);
}
/**
 * @internal
 *
 * A helper that checks a single call arguments, which may include the
 * use of matchers. This is used in finding any call or checking a specific
 * call
 */
function assertCallHasArgs(call, args) {
    node_assert_1.strict.ok(call && args.length === call.arguments?.length, 'Number of arguments does not match');
    args.forEach((arg, i) => assertMatch(call.arguments[i], arg));
}
/**
 * @internal
 *
 * A helper that checks for the first instance of a match on the actual call
 * arguments (this extracts the toHaveBeenCalledWith logic)
 */
function assertSomeCallHasArgs(value, args) {
    node_assert_1.strict.ok(value?.mock?.calls.some((call) => {
        try {
            assertCallHasArgs(call, args);
            return true;
        }
        catch {
            return false;
        }
    }), 'No call found matching arguments');
}
/**
 * @internal
 *
 * Asserts that the value is either (equal deep) or matches the matcher (if supplied)
 */
function assertMatch(value, check) {
    check instanceof Matcher
        ? check.assertMatch(value)
        : Array.isArray(check)
            ? assertMatchArr(value, check)
            : check && typeof check === 'object'
                ? assertMatchObj(value, check)
                : node_assert_1.strict.deepStrictEqual(value, check);
}
/**
 * @internal
 *
 * A helper to match the supplied array check against the resulting array
 *
 * @param {unknown} value
 * @param {unknown[]} check
 */
function assertMatchArr(value, check) {
    node_assert_1.strict.ok(value && Array.isArray(value), `Expected array value, found ${typeof value}`);
    node_assert_1.strict.ok(value.length === check.length, `Expected array with ${check.length} entries, found ${value.length}`);
    check.forEach((other, i) => assertMatch(value[i], other));
}
/**
 * @internal
 *
 * A helper to match the supplied fields against the resulting object
 */
function assertMatchObj(value, check) {
    node_assert_1.strict.ok(value && typeof value === 'object', `Expected object value, found ${typeof value}`);
    Object
        .entries(check)
        .forEach(([key, other]) => assertMatch(value[key], other));
}
/**
 * @internal
 *
 * A helper to match a string value against another string or regex
 */
function assertMatchStr(value, check) {
    node_assert_1.strict.ok(typeof value === 'string', `Expected string value, found ${typeof value}`);
    typeof check === 'string'
        ? node_assert_1.strict.strictEqual(value, check)
        : node_assert_1.strict.match(value, check);
}
/**
 * @internal
 *
 * A helper to check the type of a specific value as used in the expect.any(Clazz) matcher
 *
 * @see https://github.com/facebook/jest/blob/a49c88610e49a3242576160740a32a2fe11161e1/packages/expect/src/asymmetricMatchers.ts#L103-L133
 */
function assertInstanceOf(value, Clazz) {
    node_assert_1.strict.ok((Clazz === Array && Array.isArray(value)) ||
        (Clazz === BigInt && typeof value === 'bigint') ||
        (Clazz === Boolean && typeof value === 'boolean') ||
        (Clazz === Function && typeof value === 'function') ||
        (Clazz === Number && typeof value === 'number') ||
        (Clazz === Object && typeof value === 'object') ||
        (Clazz === String && typeof value === 'string') ||
        (Clazz === Symbol && typeof value === 'symbol') ||
        (value instanceof Clazz), `${value} is not an instance of ${Clazz.name}`);
}
/**
 * @internal
 *
 * A helper to ensure that the supplied string/array does include the checker string.
 *
 * @param {string | unknown[]} value
 * @param {string} check
 */
function assertIncludes(value, [check, Clazz]) {
    assertInstanceOf(value, Clazz);
    node_assert_1.strict.ok(value?.includes(check), `${value} does not include ${check}`);
}
/**
 * Sets up the shimmed expect(...) function, including all .to* and .not.to*
 * functions. This is not comprehensive, rather is contains what we need to
 * make all polkadot-js usages pass
 **/
function expect() {
    const rootMatchers = {
        // eslint-disable-next-line @typescript-eslint/ban-types
        any: (Clazz) => new Matcher(assertInstanceOf, Clazz),
        anything: () => new Matcher(assertNonNullish),
        arrayContaining: (check) => new Matcher(assertIncludes, [check, Array]),
        objectContaining: (check) => new Matcher(assertMatchObj, check),
        stringContaining: (check) => new Matcher(assertIncludes, [check, String]),
        stringMatching: (check) => new Matcher(assertMatchStr, check)
    };
    return {
        expect: (0, util_js_1.enhanceObj)((0, util_js_1.enhanceObj)((value) => (0, util_js_1.enhanceObj)({
            not: (0, util_js_1.enhanceObj)({
                toBe: (other) => node_assert_1.strict.notStrictEqual(value, other),
                toBeDefined: () => node_assert_1.strict.ok(value === undefined),
                toBeNull: (value) => node_assert_1.strict.ok(value !== null),
                toBeUndefined: () => node_assert_1.strict.ok(value !== undefined),
                toEqual: (other) => node_assert_1.strict.notDeepEqual(value, other),
                toHaveBeenCalled: () => node_assert_1.strict.ok(!value?.mock?.calls.length),
                toThrow: (message) => node_assert_1.strict.doesNotThrow(value, message && { message })
            }, stubExpectFnNot),
            rejects: (0, util_js_1.enhanceObj)({
                toThrow: (message) => node_assert_1.strict.rejects(value, message && { message })
            }, stubExpectFnRejects),
            resolves: (0, util_js_1.enhanceObj)({}, stubExpectFnResolves),
            toBe: (other) => node_assert_1.strict.strictEqual(value, other),
            toBeDefined: () => node_assert_1.strict.ok(value !== undefined),
            toBeFalsy: () => node_assert_1.strict.ok(!value),
            // eslint-disable-next-line @typescript-eslint/ban-types
            toBeInstanceOf: (Clazz) => assertInstanceOf(value, Clazz),
            toBeNull: (value) => node_assert_1.strict.ok(value === null),
            toBeTruthy: () => node_assert_1.strict.ok(value),
            toBeUndefined: () => node_assert_1.strict.ok(value === undefined),
            toEqual: (other) => node_assert_1.strict.deepEqual(value, other),
            toHaveBeenCalled: () => node_assert_1.strict.ok(value?.mock?.calls.length),
            toHaveBeenCalledTimes: (count) => node_assert_1.strict.equal(value?.mock?.calls.length, count),
            toHaveBeenCalledWith: (...args) => assertSomeCallHasArgs(value, args),
            toHaveBeenLastCalledWith: (...args) => assertCallHasArgs(value?.mock?.calls.at(-1), args),
            toHaveLength: (length) => node_assert_1.strict.equal(value?.length, length),
            toMatch: (check) => assertMatchStr(value, check),
            toMatchObject: (check) => assertMatchObj(value, check),
            toThrow: (message) => node_assert_1.strict.throws(value, message && { message })
        }, stubExpectFn), rootMatchers), stubExpect)
    };
}
exports.expect = expect;
