/// <reference types="jsdom" />
/// <reference types="jsdom" resolution-mode="require"/>
/**
 * Export a very basic JSDom environment - this is just enough so we have
 * @testing-environment/react tests passing in this repo
 *
 * FIXME: This approach is actually _explicitly_ discouraged by JSDOM - when
 * using window you should run the tests inside that context, instead of just
 * blindly relying on the globals as we do here
 */
export declare function browser(): {
    HTMLAnchorElement: {
        new (): HTMLAnchorElement;
        prototype: HTMLAnchorElement;
    };
    HTMLAreaElement: {
        new (): HTMLAreaElement;
        prototype: HTMLAreaElement;
    };
    HTMLAudioElement: {
        new (): HTMLAudioElement;
        prototype: HTMLAudioElement;
    };
    HTMLBRElement: {
        new (): HTMLBRElement;
        prototype: HTMLBRElement;
    };
    HTMLBaseElement: {
        new (): HTMLBaseElement;
        prototype: HTMLBaseElement;
    };
    HTMLBodyElement: {
        new (): HTMLBodyElement;
        prototype: HTMLBodyElement;
    };
    HTMLButtonElement: {
        new (): HTMLButtonElement;
        prototype: HTMLButtonElement;
    };
    HTMLCanvasElement: {
        new (): HTMLCanvasElement;
        prototype: HTMLCanvasElement;
    };
    HTMLDListElement: {
        new (): HTMLDListElement;
        prototype: HTMLDListElement;
    };
    HTMLDataElement: {
        new (): HTMLDataElement;
        prototype: HTMLDataElement;
    };
    HTMLDataListElement: {
        new (): HTMLDataListElement;
        prototype: HTMLDataListElement;
    };
    HTMLDetailsElement: {
        new (): HTMLDetailsElement;
        prototype: HTMLDetailsElement;
    };
    HTMLDialogElement: {
        new (): HTMLDialogElement;
        readonly prototype: HTMLDialogElement;
    };
    HTMLDirectoryElement: {
        new (): HTMLDirectoryElement;
        prototype: HTMLDirectoryElement;
    };
    HTMLDivElement: {
        new (): HTMLDivElement;
        prototype: HTMLDivElement;
    };
    HTMLElement: {
        new (): HTMLElement;
        prototype: HTMLElement;
    };
    HTMLEmbedElement: {
        new (): HTMLEmbedElement;
        prototype: HTMLEmbedElement;
    };
    HTMLFieldSetElement: {
        new (): HTMLFieldSetElement;
        prototype: HTMLFieldSetElement;
    };
    HTMLFontElement: {
        new (): HTMLFontElement;
        prototype: HTMLFontElement;
    };
    HTMLFormElement: {
        new (): HTMLFormElement;
        prototype: HTMLFormElement;
    };
    HTMLFrameElement: {
        new (): HTMLFrameElement;
        prototype: HTMLFrameElement;
    };
    HTMLFrameSetElement: {
        new (): HTMLFrameSetElement;
        prototype: HTMLFrameSetElement;
    };
    HTMLHRElement: {
        new (): HTMLHRElement;
        prototype: HTMLHRElement;
    };
    HTMLHeadElement: {
        new (): HTMLHeadElement;
        prototype: HTMLHeadElement;
    };
    HTMLHeadingElement: {
        new (): HTMLHeadingElement;
        prototype: HTMLHeadingElement;
    };
    HTMLHtmlElement: {
        new (): HTMLHtmlElement;
        prototype: HTMLHtmlElement;
    };
    HTMLIFrameElement: {
        new (): HTMLIFrameElement;
        prototype: HTMLIFrameElement;
    };
    HTMLImageElement: {
        new (): HTMLImageElement;
        prototype: HTMLImageElement;
    };
    HTMLInputElement: {
        new (): HTMLInputElement;
        prototype: HTMLInputElement;
    };
    HTMLLIElement: {
        new (): HTMLLIElement;
        prototype: HTMLLIElement;
    };
    HTMLLabelElement: {
        new (): HTMLLabelElement;
        prototype: HTMLLabelElement;
    };
    HTMLLegendElement: {
        new (): HTMLLegendElement;
        prototype: HTMLLegendElement;
    };
    HTMLLinkElement: {
        new (): HTMLLinkElement;
        prototype: HTMLLinkElement;
    };
    HTMLMapElement: {
        new (): HTMLMapElement;
        prototype: HTMLMapElement;
    };
    HTMLMarqueeElement: {
        new (): HTMLMarqueeElement;
        prototype: HTMLMarqueeElement;
    };
    HTMLMediaElement: {
        new (): HTMLMediaElement;
        prototype: HTMLMediaElement;
        readonly NETWORK_EMPTY: 0;
        readonly NETWORK_IDLE: 1;
        readonly NETWORK_LOADING: 2;
        readonly NETWORK_NO_SOURCE: 3;
        readonly HAVE_NOTHING: 0;
        readonly HAVE_METADATA: 1;
        readonly HAVE_CURRENT_DATA: 2;
        readonly HAVE_FUTURE_DATA: 3;
        readonly HAVE_ENOUGH_DATA: 4;
    };
    HTMLMenuElement: {
        new (): HTMLMenuElement;
        prototype: HTMLMenuElement;
    };
    HTMLMetaElement: {
        new (): HTMLMetaElement;
        prototype: HTMLMetaElement;
    };
    HTMLMeterElement: {
        new (): HTMLMeterElement;
        prototype: HTMLMeterElement;
    };
    HTMLModElement: {
        new (): HTMLModElement;
        prototype: HTMLModElement;
    };
    HTMLOListElement: {
        new (): HTMLOListElement;
        prototype: HTMLOListElement;
    };
    HTMLObjectElement: {
        new (): HTMLObjectElement;
        prototype: HTMLObjectElement;
    };
    HTMLOptGroupElement: {
        new (): HTMLOptGroupElement;
        prototype: HTMLOptGroupElement;
    };
    HTMLOptionElement: {
        new (): HTMLOptionElement;
        prototype: HTMLOptionElement;
    };
    HTMLOutputElement: {
        new (): HTMLOutputElement;
        prototype: HTMLOutputElement;
    };
    HTMLParagraphElement: {
        new (): HTMLParagraphElement;
        prototype: HTMLParagraphElement;
    };
    HTMLParamElement: {
        new (): HTMLParamElement;
        prototype: HTMLParamElement;
    };
    HTMLPictureElement: {
        new (): HTMLPictureElement;
        prototype: HTMLPictureElement;
    };
    HTMLPreElement: {
        new (): HTMLPreElement;
        prototype: HTMLPreElement;
    };
    HTMLProgressElement: {
        new (): HTMLProgressElement;
        prototype: HTMLProgressElement;
    };
    HTMLQuoteElement: {
        new (): HTMLQuoteElement;
        prototype: HTMLQuoteElement;
    };
    HTMLScriptElement: {
        new (): HTMLScriptElement;
        prototype: HTMLScriptElement;
        supports(type: string): boolean;
    };
    HTMLSelectElement: {
        new (): HTMLSelectElement;
        prototype: HTMLSelectElement;
    };
    HTMLSlotElement: {
        new (): HTMLSlotElement;
        prototype: HTMLSlotElement;
    };
    HTMLSourceElement: {
        new (): HTMLSourceElement;
        prototype: HTMLSourceElement;
    };
    HTMLSpanElement: {
        new (): HTMLSpanElement;
        prototype: HTMLSpanElement;
    };
    HTMLStyleElement: {
        new (): HTMLStyleElement;
        prototype: HTMLStyleElement;
    };
    HTMLTableCaptionElement: {
        new (): HTMLTableCaptionElement;
        prototype: HTMLTableCaptionElement;
    };
    HTMLTableCellElement: {
        new (): HTMLTableCellElement;
        prototype: HTMLTableCellElement;
    };
    HTMLTableColElement: {
        new (): HTMLTableColElement;
        prototype: HTMLTableColElement;
    };
    HTMLTableElement: {
        new (): HTMLTableElement;
        prototype: HTMLTableElement;
    };
    HTMLTableRowElement: {
        new (): HTMLTableRowElement;
        prototype: HTMLTableRowElement;
    };
    HTMLTableSectionElement: {
        new (): HTMLTableSectionElement;
        prototype: HTMLTableSectionElement;
    };
    HTMLTemplateElement: {
        new (): HTMLTemplateElement;
        prototype: HTMLTemplateElement;
    };
    HTMLTextAreaElement: {
        new (): HTMLTextAreaElement;
        prototype: HTMLTextAreaElement;
    };
    HTMLTimeElement: {
        new (): HTMLTimeElement;
        prototype: HTMLTimeElement;
    };
    HTMLTitleElement: {
        new (): HTMLTitleElement;
        prototype: HTMLTitleElement;
    };
    HTMLTrackElement: {
        new (): HTMLTrackElement;
        prototype: HTMLTrackElement;
        readonly NONE: 0;
        readonly LOADING: 1;
        readonly LOADED: 2;
        readonly ERROR: 3;
    };
    HTMLUListElement: {
        new (): HTMLUListElement;
        prototype: HTMLUListElement;
    };
    HTMLUnknownElement: {
        new (): HTMLUnknownElement;
        prototype: HTMLUnknownElement;
    };
    HTMLVideoElement: {
        new (): HTMLVideoElement;
        prototype: HTMLVideoElement;
    };
    crypto: Crypto;
    document: Document;
    localStorage: Storage;
    navigator: Navigator;
    window: import("jsdom").DOMWindow;
};
