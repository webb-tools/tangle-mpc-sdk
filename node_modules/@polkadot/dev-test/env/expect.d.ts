type AssertMatchFn = (value: unknown) => void;
/**
 * @internal
 *
 * A helper that wraps a matching function in an ExpectMatcher. This is (currently)
 * only used/checked for in the calledWith* helpers
 *
 * TODO We don't use it in polkadot-js, but a useful enhancement could be for
 * any of the to* expectations to detect and use those. An example of useful code
 * in that case:
 *
 * ```js
 * expect({
 *   a: 'blah',
 *   b: 3
 * }).toEqual(
 *   expect.objectContaining({ b: 3 })
 * )
 * ```
 *
 * An example of matcher use can be seen in the isCalledWith loops
 */
declare class Matcher {
    assertMatch: AssertMatchFn;
    constructor(assertFn: (value: any, check: any) => void, check?: unknown);
}
/**
 * Sets up the shimmed expect(...) function, including all .to* and .not.to*
 * functions. This is not comprehensive, rather is contains what we need to
 * make all polkadot-js usages pass
 **/
export declare function expect(): {
    expect: ((value: unknown) => {
        not: {
            toBe: (other: unknown) => void;
            toBeDefined: () => void;
            toBeNull: (value: unknown) => void;
            toBeUndefined: () => void;
            toEqual: (other: unknown) => void;
            toHaveBeenCalled: () => void;
            toThrow: (message?: RegExp | Error | string) => void;
        } & Omit<{
            not: import("../types.js").StubFn;
            toMatchInlineSnapshot: import("../types.js").StubFn;
            toMatchSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingInlineSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingSnapshot: import("../types.js").StubFn;
            lastCalledWith: import("../types.js").StubFn;
            lastReturnedWith: import("../types.js").StubFn;
            nthCalledWith: import("../types.js").StubFn;
            nthReturnedWith: import("../types.js").StubFn;
            rejects: import("../types.js").StubFn;
            resolves: import("../types.js").StubFn;
            toBe: import("../types.js").StubFn;
            toBeCalled: import("../types.js").StubFn;
            toBeCalledTimes: import("../types.js").StubFn;
            toBeCalledWith: import("../types.js").StubFn;
            toBeCloseTo: import("../types.js").StubFn;
            toBeDefined: import("../types.js").StubFn;
            toBeFalsy: import("../types.js").StubFn;
            toBeGreaterThan: import("../types.js").StubFn;
            toBeGreaterThanOrEqual: import("../types.js").StubFn;
            toBeInstanceOf: import("../types.js").StubFn;
            toBeLessThan: import("../types.js").StubFn;
            toBeLessThanOrEqual: import("../types.js").StubFn;
            toBeNaN: import("../types.js").StubFn;
            toBeNull: import("../types.js").StubFn;
            toBeTruthy: import("../types.js").StubFn;
            toBeUndefined: import("../types.js").StubFn;
            toContain: import("../types.js").StubFn;
            toContainEqual: import("../types.js").StubFn;
            toEqual: import("../types.js").StubFn;
            toHaveBeenCalled: import("../types.js").StubFn;
            toHaveBeenCalledTimes: import("../types.js").StubFn;
            toHaveBeenCalledWith: import("../types.js").StubFn;
            toHaveBeenLastCalledWith: import("../types.js").StubFn;
            toHaveBeenNthCalledWith: import("../types.js").StubFn;
            toHaveLastReturnedWith: import("../types.js").StubFn;
            toHaveLength: import("../types.js").StubFn;
            toHaveNthReturnedWith: import("../types.js").StubFn;
            toHaveProperty: import("../types.js").StubFn;
            toHaveReturned: import("../types.js").StubFn;
            toHaveReturnedTimes: import("../types.js").StubFn;
            toHaveReturnedWith: import("../types.js").StubFn;
            toMatch: import("../types.js").StubFn;
            toMatchObject: import("../types.js").StubFn;
            toReturn: import("../types.js").StubFn;
            toReturnTimes: import("../types.js").StubFn;
            toReturnWith: import("../types.js").StubFn;
            toStrictEqual: import("../types.js").StubFn;
            toThrow: import("../types.js").StubFn;
            toThrowError: import("../types.js").StubFn;
        }, "toBe" | "toBeDefined" | "toBeNull" | "toBeUndefined" | "toEqual" | "toHaveBeenCalled" | "toThrow">;
        rejects: {
            toThrow: (message?: RegExp | Error | string) => Promise<void>;
        } & Omit<{
            not: import("../types.js").StubFn;
            toMatchInlineSnapshot: import("../types.js").StubFn;
            toMatchSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingInlineSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingSnapshot: import("../types.js").StubFn;
            lastCalledWith: import("../types.js").StubFn;
            lastReturnedWith: import("../types.js").StubFn;
            nthCalledWith: import("../types.js").StubFn;
            nthReturnedWith: import("../types.js").StubFn;
            rejects: import("../types.js").StubFn;
            resolves: import("../types.js").StubFn;
            toBe: import("../types.js").StubFn;
            toBeCalled: import("../types.js").StubFn;
            toBeCalledTimes: import("../types.js").StubFn;
            toBeCalledWith: import("../types.js").StubFn;
            toBeCloseTo: import("../types.js").StubFn;
            toBeDefined: import("../types.js").StubFn;
            toBeFalsy: import("../types.js").StubFn;
            toBeGreaterThan: import("../types.js").StubFn;
            toBeGreaterThanOrEqual: import("../types.js").StubFn;
            toBeInstanceOf: import("../types.js").StubFn;
            toBeLessThan: import("../types.js").StubFn;
            toBeLessThanOrEqual: import("../types.js").StubFn;
            toBeNaN: import("../types.js").StubFn;
            toBeNull: import("../types.js").StubFn;
            toBeTruthy: import("../types.js").StubFn;
            toBeUndefined: import("../types.js").StubFn;
            toContain: import("../types.js").StubFn;
            toContainEqual: import("../types.js").StubFn;
            toEqual: import("../types.js").StubFn;
            toHaveBeenCalled: import("../types.js").StubFn;
            toHaveBeenCalledTimes: import("../types.js").StubFn;
            toHaveBeenCalledWith: import("../types.js").StubFn;
            toHaveBeenLastCalledWith: import("../types.js").StubFn;
            toHaveBeenNthCalledWith: import("../types.js").StubFn;
            toHaveLastReturnedWith: import("../types.js").StubFn;
            toHaveLength: import("../types.js").StubFn;
            toHaveNthReturnedWith: import("../types.js").StubFn;
            toHaveProperty: import("../types.js").StubFn;
            toHaveReturned: import("../types.js").StubFn;
            toHaveReturnedTimes: import("../types.js").StubFn;
            toHaveReturnedWith: import("../types.js").StubFn;
            toMatch: import("../types.js").StubFn;
            toMatchObject: import("../types.js").StubFn;
            toReturn: import("../types.js").StubFn;
            toReturnTimes: import("../types.js").StubFn;
            toReturnWith: import("../types.js").StubFn;
            toStrictEqual: import("../types.js").StubFn;
            toThrow: import("../types.js").StubFn;
            toThrowError: import("../types.js").StubFn;
        }, "toThrow">;
        resolves: Omit<{
            not: import("../types.js").StubFn;
            toMatchInlineSnapshot: import("../types.js").StubFn;
            toMatchSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingInlineSnapshot: import("../types.js").StubFn;
            toThrowErrorMatchingSnapshot: import("../types.js").StubFn;
            lastCalledWith: import("../types.js").StubFn;
            lastReturnedWith: import("../types.js").StubFn;
            nthCalledWith: import("../types.js").StubFn;
            nthReturnedWith: import("../types.js").StubFn;
            rejects: import("../types.js").StubFn;
            resolves: import("../types.js").StubFn;
            toBe: import("../types.js").StubFn;
            toBeCalled: import("../types.js").StubFn;
            toBeCalledTimes: import("../types.js").StubFn;
            toBeCalledWith: import("../types.js").StubFn;
            toBeCloseTo: import("../types.js").StubFn;
            toBeDefined: import("../types.js").StubFn;
            toBeFalsy: import("../types.js").StubFn;
            toBeGreaterThan: import("../types.js").StubFn;
            toBeGreaterThanOrEqual: import("../types.js").StubFn;
            toBeInstanceOf: import("../types.js").StubFn;
            toBeLessThan: import("../types.js").StubFn;
            toBeLessThanOrEqual: import("../types.js").StubFn;
            toBeNaN: import("../types.js").StubFn;
            toBeNull: import("../types.js").StubFn;
            toBeTruthy: import("../types.js").StubFn;
            toBeUndefined: import("../types.js").StubFn;
            toContain: import("../types.js").StubFn;
            toContainEqual: import("../types.js").StubFn;
            toEqual: import("../types.js").StubFn;
            toHaveBeenCalled: import("../types.js").StubFn;
            toHaveBeenCalledTimes: import("../types.js").StubFn;
            toHaveBeenCalledWith: import("../types.js").StubFn;
            toHaveBeenLastCalledWith: import("../types.js").StubFn;
            toHaveBeenNthCalledWith: import("../types.js").StubFn;
            toHaveLastReturnedWith: import("../types.js").StubFn;
            toHaveLength: import("../types.js").StubFn;
            toHaveNthReturnedWith: import("../types.js").StubFn;
            toHaveProperty: import("../types.js").StubFn;
            toHaveReturned: import("../types.js").StubFn;
            toHaveReturnedTimes: import("../types.js").StubFn;
            toHaveReturnedWith: import("../types.js").StubFn;
            toMatch: import("../types.js").StubFn;
            toMatchObject: import("../types.js").StubFn;
            toReturn: import("../types.js").StubFn;
            toReturnTimes: import("../types.js").StubFn;
            toReturnWith: import("../types.js").StubFn;
            toStrictEqual: import("../types.js").StubFn;
            toThrow: import("../types.js").StubFn;
            toThrowError: import("../types.js").StubFn;
        }, never>;
        toBe: (other: unknown) => void;
        toBeDefined: () => void;
        toBeFalsy: () => void;
        toBeInstanceOf: (Clazz: Function) => void;
        toBeNull: (value: unknown) => void;
        toBeTruthy: () => void;
        toBeUndefined: () => void;
        toEqual: (other: unknown) => void;
        toHaveBeenCalled: () => void;
        toHaveBeenCalledTimes: (count: number) => void;
        toHaveBeenCalledWith: (...args: unknown[]) => void;
        toHaveBeenLastCalledWith: (...args: unknown[]) => void;
        toHaveLength: (length: number) => void;
        toMatch: (check: string | RegExp) => void;
        toMatchObject: (check: object) => void;
        toThrow: (message?: RegExp | Error | string) => void;
    } & Omit<{
        not: import("../types.js").StubFn;
        toMatchInlineSnapshot: import("../types.js").StubFn;
        toMatchSnapshot: import("../types.js").StubFn;
        toThrowErrorMatchingInlineSnapshot: import("../types.js").StubFn;
        toThrowErrorMatchingSnapshot: import("../types.js").StubFn;
        lastCalledWith: import("../types.js").StubFn;
        lastReturnedWith: import("../types.js").StubFn;
        nthCalledWith: import("../types.js").StubFn;
        nthReturnedWith: import("../types.js").StubFn;
        rejects: import("../types.js").StubFn;
        resolves: import("../types.js").StubFn;
        toBe: import("../types.js").StubFn;
        toBeCalled: import("../types.js").StubFn;
        toBeCalledTimes: import("../types.js").StubFn;
        toBeCalledWith: import("../types.js").StubFn;
        toBeCloseTo: import("../types.js").StubFn;
        toBeDefined: import("../types.js").StubFn;
        toBeFalsy: import("../types.js").StubFn;
        toBeGreaterThan: import("../types.js").StubFn;
        toBeGreaterThanOrEqual: import("../types.js").StubFn;
        toBeInstanceOf: import("../types.js").StubFn;
        toBeLessThan: import("../types.js").StubFn;
        toBeLessThanOrEqual: import("../types.js").StubFn;
        toBeNaN: import("../types.js").StubFn;
        toBeNull: import("../types.js").StubFn;
        toBeTruthy: import("../types.js").StubFn;
        toBeUndefined: import("../types.js").StubFn;
        toContain: import("../types.js").StubFn;
        toContainEqual: import("../types.js").StubFn;
        toEqual: import("../types.js").StubFn;
        toHaveBeenCalled: import("../types.js").StubFn;
        toHaveBeenCalledTimes: import("../types.js").StubFn;
        toHaveBeenCalledWith: import("../types.js").StubFn;
        toHaveBeenLastCalledWith: import("../types.js").StubFn;
        toHaveBeenNthCalledWith: import("../types.js").StubFn;
        toHaveLastReturnedWith: import("../types.js").StubFn;
        toHaveLength: import("../types.js").StubFn;
        toHaveNthReturnedWith: import("../types.js").StubFn;
        toHaveProperty: import("../types.js").StubFn;
        toHaveReturned: import("../types.js").StubFn;
        toHaveReturnedTimes: import("../types.js").StubFn;
        toHaveReturnedWith: import("../types.js").StubFn;
        toMatch: import("../types.js").StubFn;
        toMatchObject: import("../types.js").StubFn;
        toReturn: import("../types.js").StubFn;
        toReturnTimes: import("../types.js").StubFn;
        toReturnWith: import("../types.js").StubFn;
        toStrictEqual: import("../types.js").StubFn;
        toThrow: import("../types.js").StubFn;
        toThrowError: import("../types.js").StubFn;
    }, "not" | "rejects" | "resolves" | "toBe" | "toBeDefined" | "toBeFalsy" | "toBeInstanceOf" | "toBeNull" | "toBeTruthy" | "toBeUndefined" | "toEqual" | "toHaveBeenCalled" | "toHaveBeenCalledTimes" | "toHaveBeenCalledWith" | "toHaveBeenLastCalledWith" | "toHaveLength" | "toMatch" | "toMatchObject" | "toThrow">) & Omit<{
        any: (Clazz: Function) => Matcher;
        anything: () => Matcher;
        arrayContaining: (check: string) => Matcher;
        objectContaining: (check: object) => Matcher;
        stringContaining: (check: string) => Matcher;
        stringMatching: (check: string | RegExp) => Matcher;
    }, never> & Omit<{
        addEqualityTesters: import("../types.js").StubFn;
        addSnapshotSerializer: import("../types.js").StubFn;
        any: import("../types.js").StubFn;
        anything: import("../types.js").StubFn;
        arrayContaining: import("../types.js").StubFn;
        assertions: import("../types.js").StubFn;
        closeTo: import("../types.js").StubFn;
        extend: import("../types.js").StubFn;
        extractExpectedAssertionsErrors: import("../types.js").StubFn;
        getState: import("../types.js").StubFn;
        hasAssertions: import("../types.js").StubFn;
        not: import("../types.js").StubFn;
        objectContaining: import("../types.js").StubFn;
        setState: import("../types.js").StubFn;
        stringContaining: import("../types.js").StubFn;
        stringMatching: import("../types.js").StubFn;
        toMatchInlineSnapshot: import("../types.js").StubFn;
        toMatchSnapshot: import("../types.js").StubFn;
        toThrowErrorMatchingInlineSnapshot: import("../types.js").StubFn;
        toThrowErrorMatchingSnapshot: import("../types.js").StubFn;
    }, "any" | "anything" | "arrayContaining" | "objectContaining" | "stringContaining" | "stringMatching">;
};
export {};
