"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pureOpExp = exports.jsOpExp = exports.json = exports.dynamic = exports.bigIntExp = exports.Clazz = void 0;
const tslib_1 = require("tslib");
/** This should appear as-is in the output with: 1. extension added, 2. augmented.d.ts correct */
require("./augmented.js");
/** This import should appear as-in in the ouput (cjs without asserts) */
const testJson_json_1 = tslib_1.__importDefault(require("@polkadot/dev/rootJs/testJson.json"));
/** Double double work, i.e. re-exports */
var Clazz_js_1 = require("./Clazz.js");
Object.defineProperty(exports, "Clazz", { enumerable: true, get: function () { return Clazz_js_1.Clazz; } });
/** Function to ensure that BigInt does not have the Babel Math.pow() transform */
function bigIntExp() {
    // 123_456n * 137_858_491_849n
    return 123456789n * (13n ** 10n);
}
exports.bigIntExp = bigIntExp;
/** Function to ensure that dynamic imports work */
async function dynamic(a, b) {
    // NOTE we go via this path so it points to the same location in both ESM
    // and CJS output (a './dynamic' import would be different otherwise)
    // @ts-expect-error We don't have a definition
    const { sum } = await import('@polkadot/dev/rootJs/dynamic.mjs');
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return sum(a, b);
}
exports.dynamic = dynamic;
/** Function to ensure we have json correctly imported */
function json() {
    return testJson_json_1.default.test.json;
}
exports.json = json;
/** Check support for the ?? operator */
function jsOpExp(a) {
    return a ?? 42;
}
exports.jsOpExp = jsOpExp;
/** This is an actual check to ensure PURE is all-happy */
exports.pureOpExp = jsOpExp();
