/// <reference types="node" resolution-mode="require"/>
import { URL } from 'node:url';
interface Resolved {
    format: 'commonjs' | 'json' | 'module';
    shortCircuit?: boolean;
    url: string;
}
interface ResolverContext {
    parentURL?: string;
}
type Resolver = (specifier: string, context: ResolverContext) => Resolved | undefined;
/**
 * @internal
 *
 * Resolve fully-specified imports with extensions.
 **/
export declare function resolveExtTs(specifier: string, parentUrl: URL | string): Resolved | void;
/**
 * @internal
 *
 * Resolve fully-specified imports with extensions. Here we cater for the TS
 * mapping of import foo from './bar.js' where only './bar.ts' exists
 **/
export declare function resolveExtJs(specifier: string, parentUrl: URL | string): Resolved | void;
/**
 * @internal
 *
 * Resolution for Json files. Generally these would be via path aliasing.
 */
export declare function resolveExtJson(specifier: string, parentUrl: URL | string): Resolved | void;
/**
 * @internal
 *
 * Resolve relative (extensionless) paths.
 *
 * At some point we probably might need to extend this to cater for the
 * ts (recommended) approach for using .js extensions inside the sources.
 * However, since we don't use this in the polkadot-js code, can kick this
 * down the line
 **/
export declare function resolveExtBare(specifier: string, parentUrl: URL | string): Resolved | void;
/**
 * @internal
 *
 * Resolve anything that is not an alias
 **/
export declare function resolveNonAlias(specifier: string, parentUrl: URL | string): Resolved | void;
/**
 * @internal
 *
 * Resolve TS alias mappings as defined in the tsconfig.json file
 **/
export declare function resolveAlias(specifier: string, _parentUrl: URL | string, aliases?: import("./types.js").Alias[]): Resolved | void;
/**
 * Resolves a path using our logic.
 *
 * 1. First we attempt to directly resolve if .ts/.tsx extension is found
 * 2. Then we do relative resolves (this is for extension-less .ts files)
 * 3. The we try to do resolution via TS aliases
 *
 * ... finally, try the next loader in the chain
 */
export declare function resolve(specifier: string, context: ResolverContext, nextResolve: Resolver): Resolved | undefined;
export {};
