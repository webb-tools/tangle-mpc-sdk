{"version":3,"sources":["../src/shared/constants.ts","../src/shared/createBackgroundClientConnectProvider.ts","../src/shared/getRandomChainId.ts","../src/shared/createRpc.ts","../src/shared/message-utils.ts"],"sourcesContent":["const extensionPrefix = \"@substrate/light-client-extension-helper\"\n\nconst contextPrefix = `${extensionPrefix}-context`\nexport const CONTEXT = {\n  CONTENT_SCRIPT: `${contextPrefix}-content-script`,\n  BACKGROUND: `${contextPrefix}-background`,\n  EXTENSION_PAGE: `${contextPrefix}-extension-page`,\n  WEB_PAGE: `${contextPrefix}-web-page`,\n} as const\n\nconst portPrefix = `${extensionPrefix}-port`\nexport const PORT = {\n  CONTENT_SCRIPT: `${portPrefix}-content-script`,\n  EXTENSION_PAGE: `${portPrefix}-extension-page`,\n  WEB_PAGE: `${portPrefix}-web-page`,\n} as const\n\nexport const STORAGE_PREFIX = extensionPrefix\n\nconst alarmPrefix = `${extensionPrefix}-alarm`\nexport const ALARM = {\n  DATABASE_UPDATE: `${alarmPrefix}-database-update`,\n} as const\n\nexport const KEEP_ALIVE_INTERVAL = 20_000\n","import { ConnectProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\nimport { getRandomChainId } from \"./getRandomChainId\"\nimport {\n  ToApplication,\n  ToExtension,\n} from \"@substrate/connect-extension-protocol\"\n\ntype Callback<T> = (value: T) => void\ntype UnsubscribeFn = () => void\n\ntype CreateBackgroundClientConnectProviderOptions = {\n  genesisHash: string\n  chainSpec?: string\n  relayChainGenesisHash?: string\n  postMessage: (msg: ToExtension) => void\n  addOnMessageListener: (callback: Callback<ToApplication>) => UnsubscribeFn\n  addOnDisconnectListener?: (callback: Callback<any>) => UnsubscribeFn\n}\n\nexport const createBackgroundClientConnectProvider = ({\n  genesisHash,\n  chainSpec,\n  relayChainGenesisHash,\n  postMessage,\n  addOnMessageListener,\n  addOnDisconnectListener,\n}: CreateBackgroundClientConnectProviderOptions): ConnectProvider =>\n  getSyncProvider(async () => {\n    const chainId = getRandomChainId()\n    await new Promise<void>((resolve, reject) => {\n      const removeOnMessageListener = addOnMessageListener((msg) => {\n        if (msg?.chainId !== chainId) return\n        switch (msg.type) {\n          case \"chain-ready\": {\n            resolve()\n            break\n          }\n          case \"error\": {\n            reject(new Error(msg.errorMessage))\n            break\n          }\n          default:\n            reject(new Error(`Unrecognized message ${JSON.stringify(msg)}`))\n            break\n        }\n        removeOnMessageListener()\n      })\n      postMessage(\n        chainSpec\n          ? {\n              origin: \"substrate-connect-client\",\n              type: \"add-chain\",\n              chainId,\n              chainSpec,\n              potentialRelayChainIds: relayChainGenesisHash\n                ? [relayChainGenesisHash]\n                : [],\n            }\n          : {\n              origin: \"substrate-connect-client\",\n              type: \"add-well-known-chain\",\n              chainId,\n              chainName: genesisHash,\n            },\n      )\n    })\n    return (onMessage, onHalt) => {\n      const removeOnMessageListener = addOnMessageListener((msg) => {\n        if (msg.chainId !== chainId) return\n        switch (msg.type) {\n          case \"rpc\": {\n            onMessage(msg.jsonRpcMessage)\n            break\n          }\n          case \"error\": {\n            console.error(msg.errorMessage)\n            removeListeners()\n            onHalt()\n            break\n          }\n          default:\n            console.warn(`Unrecognized message ${JSON.stringify(msg)}`)\n            break\n        }\n      })\n      const removeOnDisconnectListener = addOnDisconnectListener?.(onHalt)\n      const removeListeners = () => {\n        removeOnMessageListener()\n        removeOnDisconnectListener?.()\n      }\n      return {\n        send(jsonRpcMessage) {\n          postMessage({\n            origin: \"substrate-connect-client\",\n            type: \"rpc\",\n            chainId,\n            jsonRpcMessage,\n          })\n        },\n        disconnect() {\n          removeListeners()\n          postMessage({\n            origin: \"substrate-connect-client\",\n            type: \"remove-chain\",\n            chainId,\n          })\n        },\n      }\n    }\n  })\n","export const getRandomChainId = () => {\n  const arr = new BigUint64Array(2)\n  // It can only be used from the browser, so this is fine.\n  crypto.getRandomValues(arr)\n  const result = (arr[1]! << BigInt(64)) | arr[0]!\n  return result.toString(36)\n}\n","type RpcRequestMessage = { id?: string; method: string; params?: any[] }\ntype RpcResponseMessage =\n  | { id: string; result: any }\n  | {\n      id: string\n      error: { code: number; message: string; data?: any }\n    }\n\nexport type RpcMessage = RpcRequestMessage | RpcResponseMessage\n\ntype RpcMethod = (...params: any[]) => any | Promise<any>\n\ntype RpcSpec = Record<string, RpcMethod>\n\nexport type RpcMethodHandlers<TRpcSpec extends RpcSpec, TContext = void> = {\n  [method in keyof TRpcSpec]: (\n    params: Parameters<TRpcSpec[method]>,\n    context: TContext,\n  ) => ReturnType<TRpcSpec[method]>\n}\n\nexport type RpcMethodMiddleware<Context = any> = (\n  next: RpcMethodMiddlewareNext<Context>,\n  request: RpcRequestMessage,\n  context: Context,\n) => Promise<any>\n\ntype RpcMethodMiddlewareNext<Context> = (\n  request: RpcRequestMessage,\n  context: Context,\n) => Promise<any>\n\nexport const createRpc = <TContext>(\n  sendMessage: (message: RpcMessage) => void,\n  handlers?: RpcMethodHandlers<RpcSpec, TContext>,\n  middlewares?: RpcMethodMiddleware<TContext>[],\n) => {\n  let nextId = 0\n  const pending = new Map<\n    string,\n    { resolve: (r: any) => void; reject: (e: any) => void }\n  >()\n  middlewares ??= []\n  middlewares.unshift(\n    createResponseMiddleware(sendMessage),\n    createIsValidMethodMiddleware(Object.keys(handlers ?? {})),\n  )\n  const applyMiddleware = middlewares.reduce(\n    (prevMiddleware, nextMiddleware) => (next, message, context) =>\n      prevMiddleware(\n        (request, context) => nextMiddleware(next, request, context),\n        message,\n        context,\n      ),\n  )\n  const innerMethodHandler: RpcMethodMiddlewareNext<TContext> = (\n    { method, params },\n    context,\n  ) => handlers?.[method](params ?? [], context)\n  const methodHandler = (message: RpcRequestMessage, context: TContext) =>\n    applyMiddleware(innerMethodHandler, message, context)\n  const request = <T>(method: string, params: any[]) => {\n    const id = `${nextId++}`\n    sendMessage({ id, method, params })\n    return new Promise<T>((resolve, reject) =>\n      pending.set(id, { resolve, reject }),\n    )\n  }\n  const notify = (method: string, params: any[]) => {\n    sendMessage({ method, params })\n  }\n  const handle = async (message: RpcMessage, context: TContext) => {\n    if (!isRpcMessage(message)) return\n    if (\"method\" in message) {\n      try {\n        await methodHandler(message, context)\n      } catch (error) {\n        console.error(\"error hanlding message:\", message, error)\n      }\n    } else if (\"id\" in message) {\n      const { id } = message\n      if (!pending.has(id))\n        return console.assert(false, \"Unknown message\", message)\n      const { resolve, reject } = pending.get(id)!\n      pending.delete(id)\n      if (\"error\" in message) return reject(message.error)\n      resolve(message.result)\n    } else {\n      console.assert(false, \"Unhandled message\", message)\n    }\n  }\n  return {\n    request,\n    notify,\n    handle,\n    withClient<TRpcSpec extends RpcSpec>() {\n      const cache = new Map<string, (...args: any[]) => any>()\n      const client = new Proxy({} as TRpcSpec, {\n        get(_, prop: string) {\n          if (!cache.has(prop))\n            cache.set(prop, (...args) => request(prop, args))\n          return cache.get(prop)!\n        },\n      })\n      return {\n        request<\n          TMethod extends string & keyof TRpcSpec,\n          TParams extends Parameters<TRpcSpec[TMethod]>,\n          TReturn extends Awaited<ReturnType<TRpcSpec[TMethod]>>,\n        >(method: TMethod, params: TParams) {\n          return request<TReturn>(method, params)\n        },\n        notify<\n          TMethod extends string & keyof TRpcSpec,\n          TParams extends Parameters<TRpcSpec[TMethod]>,\n        >(method: TMethod, params: TParams) {\n          notify(method, params)\n        },\n        handle,\n        client,\n      }\n    },\n  }\n}\n\nexport const isRpcMessage = (message: any): message is RpcMessage =>\n  typeof message === \"object\" && (\"method\" in message || \"id\" in message)\n\nexport const isRpcRequestMessage = (\n  message: any,\n): message is RpcRequestMessage => isRpcMessage(message) && \"method\" in message\n\n// export const logMiddleware: MethodMiddleware = (next, message, _context) => {\n//   console.log(`> Received ${JSON.stringify(message)}`)\n//   return next(message, _context).then((response) => {\n//     console.log(`< Responding ${JSON.stringify(response)}`)\n//     return response\n//   })\n// }\n\nconst createIsValidMethodMiddleware =\n  (methods: string[]): RpcMethodMiddleware =>\n  (next, request, context) => {\n    if (!methods.includes(request.method))\n      throw new RpcError(\"Method not found\", -32601)\n    return next(request, context)\n  }\n\nconst createResponseMiddleware =\n  (sendMessage: (message: RpcResponseMessage) => void): RpcMethodMiddleware =>\n  async (next, request, context) => {\n    const { id } = request\n    try {\n      const result = await next(request, context)\n      if (!id) return\n      sendMessage({ id, result })\n    } catch (error) {\n      if (!id) return\n      if (error instanceof RpcError)\n        sendMessage({\n          id,\n          error: {\n            code: error.code,\n            message: error.message,\n            data: error.data,\n          },\n        })\n      sendMessage({\n        id,\n        error: {\n          code: -32603,\n          message:\n            error instanceof Error\n              ? error.toString()\n              : typeof error === \"string\"\n                ? error\n                : \"Unknown error\",\n        },\n      })\n    }\n  }\n\nexport class RpcError extends Error {\n  constructor(\n    readonly message: string,\n    readonly code: number,\n    readonly data?: any,\n  ) {\n    super()\n  }\n}\n","import {\n  ToExtension,\n  ToApplication,\n} from \"@substrate/connect-extension-protocol\"\nimport { RpcMessage, isRpcMessage } from \".\"\n\nexport const isSubstrateConnectMessage = (\n  msg: any,\n): msg is ToApplication | ToExtension =>\n  isSubstrateConnectToApplicationMessage(msg) ||\n  isSubstrateConnectToExtensionMessage(msg)\n\nexport const isSubstrateConnectToExtensionMessage = (\n  msg: any,\n): msg is ToExtension => {\n  if (typeof msg !== \"object\") return false\n  if (msg.origin !== \"substrate-connect-client\") return false\n  return true\n}\n\nexport const isSubstrateConnectToApplicationMessage = (\n  msg: any,\n): msg is ToApplication => {\n  if (typeof msg !== \"object\") return false\n  if (msg.origin !== \"substrate-connect-extension\") return false\n  return true\n}\n\nexport const isRpcMessageWithOrigin = <TOrigin extends string>(\n  msg: any,\n  origin: TOrigin,\n): msg is RpcMessage & { origin: TOrigin } => {\n  if (!isRpcMessage(msg)) return false\n  if (\"origin\" in msg && msg.origin !== origin) return false\n  return true\n}\n\nexport type RpcMessageWithOrigin<TOrigin extends string> = RpcMessage & {\n  origin: TOrigin\n}\n"],"mappings":"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","names":["request","context"]}