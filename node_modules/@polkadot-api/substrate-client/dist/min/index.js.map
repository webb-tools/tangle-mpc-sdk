{"version":3,"sources":["../../src/index.ts","../../src/internal-utils/abortablePromiseFn.ts","../../src/internal-utils/deferred-promise.ts","../../src/internal-utils/noop.ts","../../src/internal-utils/subscriptions-manager.ts","../../src/transaction/transaction.ts","../../src/chainhead/errors.ts","../../src/chainhead/operation-promise.ts","../../src/chainhead/body.ts","../../src/chainhead/call.ts","../../src/chainhead/header.ts","../../src/chainhead/storage-subscription.ts","../../src/chainhead/storage.ts","../../src/chainhead/unpin.ts","../../src/chainhead/chainhead.ts","../../src/client/RpcError.ts","../../src/client/createClient.ts"],"sourcesContent":["import {\n  type ConnectProvider,\n  type Provider,\n} from \"@polkadot-api/json-rpc-provider\"\nimport { getTransaction } from \"./transaction/transaction\"\nimport { getChainHead } from \"./chainhead\"\nimport {\n  ClientRequest,\n  ClientRequestCb,\n  createClient as createRawClient,\n} from \"./client\"\nimport type { ChainHead } from \"./chainhead\"\nimport type { Transaction } from \"./transaction\"\nimport { UnsubscribeFn } from \"./common-types\"\n\nexport type { ConnectProvider, Provider }\n\nexport type * from \"./common-types\"\nexport type * from \"./client\"\nexport type * from \"./transaction\"\nexport type * from \"./chainhead\"\n\nexport { RpcError } from \"./client\"\nexport { TransactionError } from \"./transaction\"\nexport {\n  StopError,\n  DisjointError,\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"./chainhead\"\n\nexport interface SubstrateClient {\n  chainHead: ChainHead\n  transaction: Transaction\n  destroy: UnsubscribeFn\n  _request: <Reply, Notification>(\n    method: string,\n    params: any[],\n    cb?: ClientRequestCb<Reply, Notification>,\n  ) => UnsubscribeFn\n}\n\nexport const createClient = (provider: ConnectProvider): SubstrateClient => {\n  const client = createRawClient(provider)\n\n  return {\n    chainHead: getChainHead(client.request as ClientRequest<any, any>),\n    transaction: getTransaction(client.request as ClientRequest<any, any>),\n    destroy: () => {\n      client.disconnect()\n    },\n    _request: client.request,\n  }\n}\n","import { AbortablePromiseFn } from \"../common-types\"\n\nclass AbortError extends Error {\n  constructor() {\n    super(\"Aborted by AbortSignal\")\n    this.name = \"AbortError\"\n  }\n}\n\nexport const abortablePromiseFn =\n  <T, A extends Array<any>>(\n    fn: (\n      ...args: [...[res: (x: T) => void, rej: (e: any) => void], ...A]\n    ) => () => void,\n  ): AbortablePromiseFn<A, T> =>\n  (...args): Promise<T> =>\n    new Promise((res, rej) => {\n      const [actualArgs, abortSignal] =\n        args[args.length - 1] instanceof AbortSignal\n          ? ([args.slice(0, args.length - 1), args[args.length - 1]] as [\n              A,\n              AbortSignal,\n            ])\n          : ([args] as unknown as [A])\n\n      const onAbort = () => {\n        cancel()\n        rej(new AbortError())\n      }\n\n      abortSignal?.addEventListener(\"abort\", onAbort, { once: true })\n\n      const removeAbortListener =\n        <T>(fn: (x: T) => void): ((x: T) => void) =>\n        (x) => {\n          abortSignal?.removeEventListener(\"abort\", onAbort)\n          fn(x)\n        }\n\n      const cancel = fn(\n        ...[removeAbortListener(res), removeAbortListener(rej), ...actualArgs],\n      )\n    })\n","export interface DeferredPromise<T> {\n  promise: Promise<T>\n  res: (value: T) => void\n  rej: (err: Error) => void\n}\n\nexport function deferred<T>(): DeferredPromise<T> {\n  let res: (value: T) => void = () => {}\n  let rej: (err: Error) => void = () => {}\n\n  const promise = new Promise<T>((_res, _rej) => {\n    res = _res\n    rej = _rej\n  })\n\n  return { promise, res, rej }\n}\n","export const noop = (): void => {}\n","export interface Subscriber<T> {\n  next: (data: T) => void\n  error: (e: Error) => void\n}\n\nexport const getSubscriptionsManager = <T>() => {\n  const subscriptions = new Map<string, Subscriber<T>>()\n\n  return {\n    has: subscriptions.has.bind(subscriptions),\n    subscribe(id: string, subscriber: Subscriber<T>) {\n      subscriptions.set(id, subscriber)\n    },\n    unsubscribe(id: string) {\n      subscriptions.delete(id)\n    },\n    next(id: string, data: T) {\n      subscriptions.get(id)?.next(data)\n    },\n    error(id: string, e: Error) {\n      const subscriber = subscriptions.get(id)\n      if (subscriber) {\n        subscriptions.delete(id)\n        subscriber.error(e)\n      }\n    },\n    errorAll(e: Error) {\n      const subscribers = [...subscriptions.values()]\n      subscriptions.clear()\n      subscribers.forEach((s) => {\n        s.error(e)\n      })\n    },\n  }\n}\n\nexport type SubscriptionManager<T> = ReturnType<\n  typeof getSubscriptionsManager<T>\n>\n","import { noop } from \"@/internal-utils\"\nimport type { ClientRequest } from \"../client\"\nimport type {\n  TxEventRpc,\n  TxFinalizedRpc,\n  TxInvalidRpc,\n  TxDroppedRpc,\n  TxErrorRpc,\n} from \"./json-rpc-types\"\nimport { Transaction, TxEvent } from \"./public-types\"\n\ntype EventToType<T extends { event: string }> = T extends { event: infer Type }\n  ? Omit<T, \"event\"> & { type: Type }\n  : T\nconst eventToType = <T extends { event: string }>(input: T): EventToType<T> => {\n  const { event: type, ...rest } = input\n  return { type, ...rest } as any\n}\n\ntype TerminalEvent = TxDroppedRpc | TxInvalidRpc | TxFinalizedRpc | TxErrorRpc\nconst terminalEvents: Set<string> = new Set<TerminalEvent[\"event\"]>([\n  \"dropped\",\n  \"invalid\",\n  \"finalized\",\n  \"error\",\n])\n\nfunction isTerminalEvent(event: TxEventRpc): event is TerminalEvent {\n  return terminalEvents.has(event.event)\n}\n\ntype ErrorEvents = TxDroppedRpc | TxInvalidRpc | TxErrorRpc\n\nexport interface ITxError {\n  type: ErrorEvents[\"event\"]\n  error: string\n}\n\nexport class TransactionError extends Error implements ITxError {\n  type\n  error\n  constructor(e: ErrorEvents) {\n    super(`TxError: ${e.event} - ${e.error}`)\n    this.type = e.event\n    this.error = e.error\n    this.name = \"TransactionError\"\n  }\n}\n\nexport const getTransaction =\n  (request: ClientRequest<string, TxEventRpc>): Transaction =>\n  (tx: string, next: (event: TxEvent) => void, error: (e: Error) => void) => {\n    let cancel = request(\"transaction_unstable_submitAndWatch\", [tx], {\n      onSuccess: (subscriptionId, follow) => {\n        const done = follow(subscriptionId, {\n          next: (event) => {\n            if (isTerminalEvent(event)) {\n              done()\n              cancel = noop\n              if (event.event !== \"finalized\")\n                return error(new TransactionError(event))\n            }\n            next(eventToType(event))\n          },\n          error(e) {\n            cancel()\n            cancel = noop\n            error(e)\n          },\n        })\n\n        cancel = () => {\n          done()\n          request(\"transaction_unstable_unwatch\", [subscriptionId])\n        }\n      },\n      onError: error,\n    })\n\n    return () => {\n      cancel()\n    }\n  }\n","export class StopError extends Error {\n  constructor() {\n    super(\"ChainHead stopped\")\n    this.name = \"StopError\"\n  }\n}\n\nexport class DisjointError extends Error {\n  constructor() {\n    super(\"ChainHead disjointed\")\n    this.name = \"DisjointError\"\n  }\n}\n\nexport class OperationLimitError extends Error {\n  constructor() {\n    super(\"ChainHead operations limit reached\")\n    this.name = \"OperationLimitError\"\n  }\n}\n\nexport class OperationError extends Error {\n  constructor(error: string) {\n    super(error)\n    this.name = \"OperationError\"\n  }\n}\n\nexport class OperationInaccessibleError extends Error {\n  constructor() {\n    super(\"ChainHead operation inaccessible\")\n    this.name = \"OperationInaccessibleError\"\n  }\n}\n","import { ClientRequest } from \"@/client\"\nimport { abortablePromiseFn, noop } from \"@/internal-utils\"\nimport {\n  CommonOperationEventsRpc,\n  OperationResponseRpc,\n} from \"./json-rpc-types\"\nimport {\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"./errors\"\n\nexport const createOperationPromise =\n  <I extends { operationId: string; event: string }, O, A extends Array<any>>(\n    operationName: string,\n    factory: (\n      ...args: A\n    ) => [\n      Array<any>,\n      (e: I, res: (x: O) => void, rej: (e: Error) => void) => void,\n    ],\n  ) =>\n  (\n    request: ClientRequest<OperationResponseRpc, I | CommonOperationEventsRpc>,\n  ) =>\n    abortablePromiseFn<O, A>((res, rej, ...args) => {\n      const [requestArgs, logicCb] = factory(...args)\n      let cancel = request(operationName, requestArgs, {\n        onSuccess: (response, followSubscription) => {\n          if (response.result === \"limitReached\") {\n            cancel = noop\n            return rej(new OperationLimitError())\n          }\n\n          let isOperationGoing = true\n          let done = noop\n          const _res = (x: O) => {\n            isOperationGoing = false\n            done()\n            res(x)\n          }\n          const _rej = (x: Error) => {\n            isOperationGoing = false\n            done()\n            rej(x)\n          }\n\n          done = followSubscription(response.operationId, {\n            next: (e) => {\n              const _e = e as CommonOperationEventsRpc\n              if (_e.event === \"operationError\") {\n                rej(new OperationError(_e.error))\n              } else if (_e.event === \"operationInaccessible\") {\n                rej(new OperationInaccessibleError())\n              } else {\n                logicCb(e as I, _res, _rej)\n              }\n            },\n            error: _rej,\n          })\n\n          cancel = () => {\n            if (!isOperationGoing) return\n            done()\n            request(\"chainHead_unstable_stopOperation\", [response.operationId])\n          }\n        },\n        onError: rej,\n      })\n\n      return () => {\n        cancel()\n      }\n    })\n","import type { OperationBodyDoneRpc } from \"./json-rpc-types\"\nimport { createOperationPromise } from \"./operation-promise\"\n\nexport const createBodyFn = createOperationPromise(\n  \"chainHead_unstable_body\",\n  (hash: string) => [\n    [hash],\n    (e: OperationBodyDoneRpc, res: (x: Array<string>) => void) => {\n      res(e.value)\n    },\n  ],\n)\n","import type { OperationCallDoneRpc } from \"./json-rpc-types\"\nimport { createOperationPromise } from \"./operation-promise\"\n\nexport const createCallFn = createOperationPromise(\n  \"chainHead_unstable_call\",\n  (hash: string, fnName: string, callParameters: string) => [\n    [hash, fnName, callParameters],\n    (e: OperationCallDoneRpc, res: (output: string) => void) => {\n      res(e.output)\n    },\n  ],\n)\n","import type { ClientRequest } from \"../client\"\n\nexport const createHeaderFn =\n  (request: ClientRequest<string, unknown>) => (hash: string) =>\n    new Promise<string>((res, rej) => {\n      request(\"chainHead_unstable_header\", [hash], {\n        onSuccess: res,\n        onError: rej,\n      })\n    })\n","import { noop } from \"@polkadot-api/utils\"\nimport {\n  ClientRequest,\n  FollowResponse,\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"..\"\nimport {\n  CommonOperationEventsRpc,\n  LimitReachedRpc,\n  OperationStorageDoneRpc,\n  OperationStorageItemsRpc,\n  OperationWaitingForContinueRpc,\n  OperationStorageStartedRpc,\n} from \"./json-rpc-types\"\n\nexport const createStorageCb =\n  (\n    request: ClientRequest<\n      OperationStorageStartedRpc | LimitReachedRpc,\n      | CommonOperationEventsRpc\n      | OperationStorageItemsRpc\n      | OperationStorageDoneRpc\n      | OperationWaitingForContinueRpc\n    >,\n  ): FollowResponse[\"storageSubscription\"] =>\n  (hash, inputs, childTrie, onItems, onError, onDone, onDiscardedItems) => {\n    if (inputs.length === 0) {\n      onDone()\n      return noop\n    }\n\n    let cancel = request(\n      \"chainHead_unstable_storage\",\n      [hash, inputs, childTrie],\n      {\n        onSuccess: (response, followSubscription) => {\n          if (\n            response.result === \"limitReached\" ||\n            response.discardedItems === inputs.length\n          )\n            return onError(new OperationLimitError())\n\n          const doneListening = followSubscription(response.operationId, {\n            next: (event) => {\n              switch (event.event) {\n                case \"operationStorageItems\": {\n                  onItems(event.items)\n                  break\n                }\n                case \"operationStorageDone\": {\n                  _onDone()\n                  break\n                }\n                case \"operationError\": {\n                  _onError(new OperationError(event.error))\n                  break\n                }\n                case \"operationInaccessible\": {\n                  _onError(new OperationInaccessibleError())\n                  break\n                }\n                default:\n                  request(\"chainHead_unstable_continue\", [])\n              }\n            },\n            error: onError,\n          })\n\n          cancel = () => {\n            doneListening()\n            request(\"chainHead_unstable_stopOperation\", [response.operationId])\n          }\n\n          const _onError = (e: Error) => {\n            cancel = noop\n            doneListening()\n            onError(e)\n          }\n\n          const _onDone = () => {\n            cancel = noop\n            doneListening()\n            onDone()\n          }\n\n          onDiscardedItems(response.discardedItems)\n        },\n        onError,\n      },\n    )\n\n    return () => {\n      cancel()\n    }\n  }\n","import { ClientRequest, FollowResponse, OperationLimitError } from \"..\"\nimport type {\n  CommonOperationEventsRpc,\n  LimitReachedRpc,\n  OperationStorageDoneRpc,\n  OperationStorageItemsRpc,\n  OperationWaitingForContinueRpc,\n  OperationStorageStartedRpc,\n} from \"./json-rpc-types\"\nimport { abortablePromiseFn } from \"@/internal-utils\"\nimport { createStorageCb } from \"./storage-subscription\"\n\nexport const createStorageFn = (\n  request: ClientRequest<\n    OperationStorageStartedRpc | LimitReachedRpc,\n    | CommonOperationEventsRpc\n    | OperationStorageItemsRpc\n    | OperationStorageDoneRpc\n    | OperationWaitingForContinueRpc\n  >,\n): FollowResponse[\"storage\"] => {\n  const cbStore = createStorageCb(request)\n  return abortablePromiseFn((resolve, reject, hash, type, key, childTrie) => {\n    const isDescendants = type.startsWith(\"descendants\")\n    let result: any = isDescendants ? [] : null\n\n    const onItems: Parameters<typeof cbStore>[3] = isDescendants\n      ? (items) => {\n          result.push(...items)\n        }\n      : (items) => {\n          result = items[0]?.[type as \"value\"]\n        }\n\n    const cancel = cbStore(\n      hash,\n      [{ key, type }],\n      childTrie ?? null,\n      onItems,\n      reject,\n      () => {\n        resolve(result)\n      },\n      (nDiscarded) => {\n        if (nDiscarded > 0) {\n          cancel()\n          reject(new OperationLimitError())\n        }\n      },\n    )\n    return cancel\n  })\n}\n","import type { ClientRequest } from \"../client\"\n\nexport const createUnpinFn =\n  (request: ClientRequest<null, unknown>) => (hashes: string[]) =>\n    new Promise<void>((res, rej) => {\n      request(\"chainHead_unstable_unpin\", [hashes], {\n        onSuccess() {\n          res()\n        },\n        onError: rej,\n      })\n    })\n","import type { ClientRequest, FollowSubscriptionCb } from \"@/client\"\nimport type {\n  FollowEventWithRuntimeRpc,\n  FollowEventWithoutRuntimeRpc,\n  OperationEventsRpc,\n  StopRpc,\n} from \"./json-rpc-types\"\nimport type {\n  ChainHead,\n  FollowEventWithoutRuntime,\n  FollowEventWithRuntime,\n  FollowResponse,\n} from \"./public-types\"\nimport {\n  Subscriber,\n  getSubscriptionsManager,\n  noop,\n  deferred,\n} from \"@/internal-utils\"\nimport { createBodyFn } from \"./body\"\nimport { createCallFn } from \"./call\"\nimport { createHeaderFn } from \"./header\"\nimport { createStorageFn } from \"./storage\"\nimport { createUnpinFn } from \"./unpin\"\nimport { DisjointError, StopError } from \"./errors\"\nimport { createStorageCb } from \"./storage-subscription\"\n\ntype FollowEventRpc =\n  | FollowEventWithRuntimeRpc\n  | FollowEventWithoutRuntimeRpc\n  | OperationEventsRpc\n  | StopRpc\n\nfunction isOperationEvent(event: FollowEventRpc): event is OperationEventsRpc {\n  return (event as OperationEventsRpc).operationId !== undefined\n}\n\nexport function getChainHead(\n  request: ClientRequest<string, FollowEventRpc>,\n): ChainHead {\n  return (\n    withRuntime: boolean,\n    onFollowEvent:\n      | ((event: FollowEventWithoutRuntime) => void)\n      | ((event: FollowEventWithRuntime) => void),\n    onFollowError: (e: Error) => void,\n  ): FollowResponse => {\n    const subscriptions = getSubscriptionsManager<OperationEventsRpc>()\n\n    const ongoingRequests = new Set<() => void>()\n    const deferredFollow = deferred<string | Error>()\n    let followSubscription: Promise<string | Error> | string | null =\n      deferredFollow.promise\n\n    const onAllFollowEventsNext = (event: FollowEventRpc) => {\n      if (isOperationEvent(event))\n        return subscriptions.next(event.operationId, event)\n\n      if (event.event !== \"stop\") {\n        const { event: type, ...rest } = event\n        // This is kinda dangerous, but YOLO\n        return onFollowEvent({ type, ...rest } as any)\n      }\n\n      onFollowError(new StopError())\n      unfollow(false)\n    }\n\n    const onAllFollowEventsError = (error: Error) => {\n      onFollowError(error)\n      unfollow()\n    }\n\n    const onFollowRequestSuccess = (\n      subscriptionId: string,\n      follow: FollowSubscriptionCb<FollowEventRpc>,\n    ) => {\n      const done = follow(subscriptionId, {\n        next: onAllFollowEventsNext,\n        error: onAllFollowEventsError,\n      })\n\n      unfollow = (sendUnfollow = true) => {\n        followSubscription = null\n        unfollow = noop\n        done()\n        sendUnfollow && request(\"chainHead_unstable_unfollow\", [subscriptionId])\n        subscriptions.errorAll(new DisjointError())\n        ongoingRequests.forEach((cb) => {\n          cb()\n        })\n        ongoingRequests.clear()\n      }\n\n      followSubscription = subscriptionId\n      deferredFollow.res(subscriptionId)\n    }\n\n    const onFollowRequestError = (e: Error) => {\n      onFollowError(e)\n      followSubscription = null\n      deferredFollow.res(e)\n    }\n\n    let unfollow: (internal?: boolean) => void = request(\n      \"chainHead_unstable_follow\",\n      [withRuntime],\n      { onSuccess: onFollowRequestSuccess, onError: onFollowRequestError },\n    )\n\n    const fRequest: ClientRequest<any, any> = (method, params, cb) => {\n      const disjoint = () => {\n        cb?.onError(new DisjointError())\n      }\n\n      if (followSubscription === null) {\n        disjoint()\n        return noop\n      }\n\n      const onSubscription = (subscription: string) => {\n        if (!cb) return request(method, [subscription, ...params])\n\n        ongoingRequests.add(disjoint)\n\n        const onSubscribeOperation = (\n          operationId: string,\n          subscriber: Subscriber<any>,\n        ) => {\n          if (followSubscription === null) {\n            subscriber.error(new DisjointError())\n            return noop\n          }\n\n          subscriptions.subscribe(operationId, subscriber)\n          return () => {\n            subscriptions.unsubscribe(operationId)\n          }\n        }\n\n        const cleanup = request(method, [subscription, ...params], {\n          onSuccess: (response) => {\n            ongoingRequests.delete(disjoint)\n            cb.onSuccess(response, onSubscribeOperation)\n          },\n          onError: (e) => {\n            ongoingRequests.delete(disjoint)\n            cb.onError(e)\n          },\n        })\n\n        return () => {\n          ongoingRequests.delete(disjoint)\n          cleanup()\n        }\n      }\n\n      if (typeof followSubscription === \"string\")\n        return onSubscription(followSubscription)\n\n      let onCancel = noop\n      followSubscription.then((x) => {\n        if (x instanceof Error) return disjoint()\n        if (followSubscription) onCancel = onSubscription(x)\n      })\n\n      return () => {\n        onCancel()\n      }\n    }\n\n    return {\n      unfollow() {\n        unfollow()\n        followSubscription = null\n      },\n      body: createBodyFn(fRequest),\n      call: createCallFn(fRequest),\n      header: createHeaderFn(fRequest),\n      storage: createStorageFn(fRequest),\n      storageSubscription: createStorageCb(fRequest),\n      unpin: createUnpinFn(fRequest),\n      _request: fRequest,\n    }\n  }\n}\n","export interface IRpcError {\n  code: number\n  message: string\n  data?: any\n}\n\nexport class RpcError extends Error implements IRpcError {\n  code\n  data\n  constructor(e: IRpcError) {\n    super(e.message)\n    this.code = e.code\n    this.data = e.data\n    this.name = \"RpcError\"\n  }\n}\n","import {\n  type ConnectProvider,\n  type Provider,\n} from \"@polkadot-api/json-rpc-provider\"\nimport { UnsubscribeFn } from \"../common-types\"\nimport { RpcError, IRpcError } from \"./RpcError\"\nimport { getSubscriptionsManager, Subscriber } from \"@/internal-utils\"\n\nexport type FollowSubscriptionCb<T> = (\n  subscriptionId: string,\n  cb: Subscriber<T>,\n) => UnsubscribeFn\n\nexport type ClientRequestCb<T, TT> = {\n  onSuccess: (result: T, followSubscription: FollowSubscriptionCb<TT>) => void\n  onError: (e: Error) => void\n}\n\nexport type ClientRequest<T, TT> = (\n  method: string,\n  params: Array<any>,\n  cb?: ClientRequestCb<T, TT>,\n) => UnsubscribeFn\n\nexport interface Client {\n  disconnect: () => void\n  request: ClientRequest<any, any>\n}\n\nexport const createClient = (gProvider: ConnectProvider): Client => {\n  const responses = new Map<number, ClientRequestCb<any, any>>()\n  const subscriptions = getSubscriptionsManager()\n\n  let provider: Provider | null = null\n\n  const send = (\n    id: number,\n    method: string,\n    params: Array<boolean | string | number | null>,\n  ) => {\n    provider!.send(\n      JSON.stringify({\n        jsonrpc: \"2.0\",\n        id,\n        method,\n        params,\n      }),\n    )\n  }\n\n  function onMessage(message: string): void {\n    try {\n      let id: number,\n        result,\n        error: IRpcError | undefined,\n        params: { subscription: any; result: any; error?: IRpcError },\n        subscription: string\n      ;({ id, result, error, params } = JSON.parse(message))\n\n      if (id) {\n        const cb = responses.get(id)\n        if (!cb) return\n\n        responses.delete(id)\n\n        return error\n          ? cb.onError(new RpcError(error))\n          : cb.onSuccess(result, (subscriptionId, subscriber) => {\n              subscriptions.subscribe(subscriptionId, subscriber)\n              return () => {\n                subscriptions.unsubscribe(subscriptionId)\n              }\n            })\n      }\n\n      // at this point, it means that it should be a notification\n      ;({ subscription, result, error } = params)\n      if (!subscription || (!error && !Object.hasOwn(params, \"result\"))) throw 0\n\n      if (error) {\n        subscriptions.error(subscription, new RpcError(error!))\n      } else {\n        subscriptions.next(subscription, result)\n      }\n    } catch (e) {\n      console.warn(\"Error parsing incomming message: \" + message)\n      console.error(e)\n    }\n  }\n  provider = gProvider(onMessage)\n\n  const disconnect = () => {\n    provider?.disconnect()\n    provider = null\n  }\n\n  let nextId = 1\n  const request = <T, TT>(\n    method: string,\n    params: Array<any>,\n    cb?: ClientRequestCb<T, TT>,\n  ): UnsubscribeFn => {\n    if (!provider) throw new Error(\"Not connected\")\n    const id = nextId++\n\n    if (cb) responses.set(id, cb)\n    send(id, method, params)\n\n    return (): void => {\n      responses.delete(id)\n    }\n  }\n\n  return {\n    request,\n    disconnect,\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","DisjointError","OperationError","OperationInaccessibleError","OperationLimitError","RpcError","StopError","TransactionError","createClient","__toCommonJS","AbortError","abortablePromiseFn","fn","args","res","rej","actualArgs","abortSignal","onAbort","cancel","removeAbortListener","x","deferred","res","rej","_res","_rej","noop","getSubscriptionsManager","subscriptions","id","subscriber","data","e","subscribers","s","eventToType","input","type","rest","terminalEvents","isTerminalEvent","event","TransactionError","e","__publicField","getTransaction","request","tx","next","error","cancel","subscriptionId","follow","done","noop","StopError","DisjointError","OperationLimitError","OperationError","error","OperationInaccessibleError","createOperationPromise","operationName","factory","request","abortablePromiseFn","res","rej","args","requestArgs","logicCb","cancel","response","followSubscription","noop","OperationLimitError","isOperationGoing","done","_res","x","_rej","e","_e","OperationError","OperationInaccessibleError","createBodyFn","createOperationPromise","hash","res","createCallFn","createOperationPromise","hash","fnName","callParameters","e","res","createHeaderFn","request","hash","res","rej","import_utils","createStorageCb","request","hash","inputs","childTrie","onItems","onError","onDone","onDiscardedItems","cancel","response","followSubscription","OperationLimitError","doneListening","event","_onDone","_onError","OperationError","OperationInaccessibleError","e","createStorageFn","request","cbStore","createStorageCb","abortablePromiseFn","resolve","reject","hash","type","key","childTrie","isDescendants","result","cancel","items","nDiscarded","OperationLimitError","createUnpinFn","request","hashes","res","rej","isOperationEvent","event","getChainHead","request","withRuntime","onFollowEvent","onFollowError","subscriptions","getSubscriptionsManager","ongoingRequests","deferredFollow","deferred","followSubscription","onAllFollowEventsNext","type","rest","StopError","unfollow","onAllFollowEventsError","error","subscriptionId","follow","done","sendUnfollow","noop","DisjointError","cb","e","fRequest","method","params","disjoint","onSubscription","subscription","onSubscribeOperation","operationId","subscriber","cleanup","response","onCancel","x","createBodyFn","createCallFn","createHeaderFn","createStorageFn","createStorageCb","createUnpinFn","RpcError","e","__publicField","createClient","gProvider","responses","subscriptions","getSubscriptionsManager","provider","send","id","method","params","onMessage","message","result","error","subscription","cb","RpcError","subscriptionId","subscriber","e","disconnect","nextId","createClient","provider","client","getChainHead","getTransaction"]}