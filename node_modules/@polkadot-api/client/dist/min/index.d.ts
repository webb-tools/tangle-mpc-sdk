import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { BlockHeader, Codec, SS58String, Descriptors, QueryFromDescriptors, TxFromDescriptors, EventsFromDescriptors } from '@polkadot-api/substrate-bindings';
import * as rxjs from 'rxjs';
import { Observable } from 'rxjs';
import * as _polkadot_api_substrate_client from '@polkadot-api/substrate-client';
import { SubstrateClient, TxValidated, TxBroadcasted, TxBestChainBlockIncluded, TxFinalized } from '@polkadot-api/substrate-client';
import { getChecksumBuilder, getDynamicBuilder, Decoder } from '@polkadot-api/metadata-builders';

type BlockHeaderWithHash = {
    hash: string;
    header: BlockHeader;
};

interface RuntimeContext {
    checksumBuilder: ReturnType<typeof getChecksumBuilder>;
    dynamicBuilder: ReturnType<typeof getDynamicBuilder>;
    events: {
        key: string;
        dec: Decoder<any>;
    };
    accountId: Codec<SS58String>;
}

type CallOptions = Partial<{
    at: string;
    signal: AbortSignal;
}>;
type WithCallOptions<Args extends Array<any>> = [
    ...args: Args,
    options?: CallOptions
];
type PossibleParents<A extends Array<any>> = A extends [...infer Left, any] ? Left | PossibleParents<Left> : [];
type StorageEntryWithoutKeys<Payload> = {
    getValue: (options?: CallOptions) => Promise<Payload>;
    watchValue: () => Observable<Payload>;
};
type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
    getValue: (...args: [...WithCallOptions<Args>]) => Promise<Payload>;
    watchValue: (...args: Args) => Observable<Payload>;
    getValues: (keys: Array<[...Args]>, options?: CallOptions) => Promise<Array<Payload>>;
    getEntries: (...args: WithCallOptions<PossibleParents<Args>>) => Promise<Array<{
        keyArgs: Args;
        value: NonNullable<Payload>;
    }>>;
};
type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;

declare const getObservableClient: ({ chainHead, transaction, destroy, }: SubstrateClient) => {
    chainHead$: () => {
        finalized$: rxjs.Observable<string>;
        finalizedHeader$: rxjs.Observable<{
            hash: string;
            header: {
                parentHash: _polkadot_api_substrate_bindings.HexString;
                number: number;
                stateRoot: _polkadot_api_substrate_bindings.HexString;
                extrinsicRoot: _polkadot_api_substrate_bindings.HexString;
                digests: ({
                    tag: "consensus";
                    value: {
                        engine: string;
                        payload: _polkadot_api_substrate_bindings.HexString;
                    };
                } | {
                    tag: "seal";
                    value: {
                        engine: string;
                        payload: _polkadot_api_substrate_bindings.HexString;
                    };
                } | {
                    tag: "preRuntime";
                    value: {
                        engine: string;
                        payload: _polkadot_api_substrate_bindings.HexString;
                    };
                } | {
                    tag: "runtimeUpdated";
                    value: undefined;
                })[];
            };
        }>;
        bestBlock$: rxjs.Observable<string>;
        bestBlocks$: rxjs.Observable<BlockHeaderWithHash[]>;
        follow$: rxjs.Observable<_polkadot_api_substrate_client.FollowEventWithRuntime>;
        runtime$: rxjs.Observable<_polkadot_api_substrate_client.Runtime>;
        metadata$: rxjs.Observable<{
            lookup: {
                id: number;
                path: string[];
                params: {
                    name: string;
                    type: number | void | undefined;
                }[];
                def: {
                    tag: "composite";
                    value: {
                        name: string | void | undefined;
                        type: number;
                        typeName: string | void | undefined;
                        docs: string[];
                    }[];
                } | {
                    tag: "variant";
                    value: {
                        name: string;
                        fields: {
                            name: string | void | undefined;
                            type: number;
                            typeName: string | void | undefined;
                            docs: string[];
                        }[];
                        index: number;
                        docs: string[];
                    }[];
                } | {
                    tag: "sequence";
                    value: number;
                } | {
                    tag: "array";
                    value: {
                        len: number;
                        type: number;
                    };
                } | {
                    tag: "tuple";
                    value: number[];
                } | {
                    tag: "primitive";
                    value: {
                        tag: "bool";
                        value: undefined;
                    } | {
                        tag: "char";
                        value: undefined;
                    } | {
                        tag: "str";
                        value: undefined;
                    } | {
                        tag: "u8";
                        value: undefined;
                    } | {
                        tag: "u16";
                        value: undefined;
                    } | {
                        tag: "u32";
                        value: undefined;
                    } | {
                        tag: "u64";
                        value: undefined;
                    } | {
                        tag: "u128";
                        value: undefined;
                    } | {
                        tag: "u256";
                        value: undefined;
                    } | {
                        tag: "i8";
                        value: undefined;
                    } | {
                        tag: "i16";
                        value: undefined;
                    } | {
                        tag: "i32";
                        value: undefined;
                    } | {
                        tag: "i64";
                        value: undefined;
                    } | {
                        tag: "i128";
                        value: undefined;
                    } | {
                        tag: "i256";
                        value: undefined;
                    };
                } | {
                    tag: "compact";
                    value: number;
                } | {
                    tag: "bitSequence";
                    value: {
                        bitStoreType: number;
                        bitOrderType: number;
                    };
                } | {
                    tag: "historicMetaCompat";
                    value: string;
                };
                docs: string[];
            }[];
            pallets: {
                name: string;
                storage: void | {
                    prefix: string;
                    items: {
                        name: string;
                        modifier: number;
                        type: {
                            tag: "map";
                            value: {
                                hashers: ({
                                    tag: "Blake2128";
                                    value: undefined;
                                } | {
                                    tag: "Blake2256";
                                    value: undefined;
                                } | {
                                    tag: "Blake2128Concat";
                                    value: undefined;
                                } | {
                                    tag: "Twox128";
                                    value: undefined;
                                } | {
                                    tag: "Twox256";
                                    value: undefined;
                                } | {
                                    tag: "Twox64Concat";
                                    value: undefined;
                                } | {
                                    tag: "Identity";
                                    value: undefined;
                                })[];
                                key: number;
                                value: number;
                            };
                        } | {
                            tag: "plain";
                            value: number;
                        };
                        fallback: _polkadot_api_substrate_bindings.HexString;
                        docs: string[];
                    }[];
                } | undefined;
                calls: number | void | undefined;
                events: number | void | undefined;
                constants: {
                    name: string;
                    type: number;
                    value: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
                errors: number | void | undefined;
                index: number;
            }[];
            extrinsic: {
                type: number;
                version: number;
                signedExtensions: {
                    identifier: string;
                    type: number;
                    additionalSigned: number;
                }[];
            };
            type: number;
        } | null>;
        body$: (hash: string | null) => rxjs.Observable<string[]>;
        call$: (hash: string | null, fnName: string, callParameters: string) => rxjs.Observable<string>;
        storage$: <Type extends "value" | "hash" | "closestDescendantMerkleValue" | "descendantsValues" | "descendantsHashes">(hash: string | null, type: Type, key: string, childTrie: string | null) => rxjs.Observable<_polkadot_api_substrate_client.StorageResult<Type>>;
        storageQueries$: (hash: string | null, queries: _polkadot_api_substrate_client.StorageItemInput[], childTrie?: string | undefined) => rxjs.Observable<_polkadot_api_substrate_client.StorageItemResponse>;
        unfollow: () => void;
        getRuntimeContext$: (hash: string | null) => rxjs.Observable<RuntimeContext>;
    };
    tx$: (transaction: string) => rxjs.Observable<_polkadot_api_substrate_client.TxValidated | _polkadot_api_substrate_client.TxBroadcasted | _polkadot_api_substrate_client.TxBestChainBlockIncluded | _polkadot_api_substrate_client.TxFinalized | _polkadot_api_substrate_client.TxInvalid | _polkadot_api_substrate_client.TxDropped>;
    destroy: _polkadot_api_substrate_client.UnsubscribeFn;
};

type SystemEvent$1 = {
    phase: {
        tag: "ApplyExtrinsic";
        value: number;
    } | {
        tag: "Finalization";
    } | {
        tag: "Initialization";
    };
    event: {
        tag: string;
        value: {
            tag: string;
            value: any;
        };
    };
    topics: Array<any>;
};
type TxSuccess = {
    ok: boolean;
    events: Array<SystemEvent$1["event"]>;
};
type TxFunction<Args extends Array<any>> = (from: SS58String, ...args: Args) => Promise<TxSuccess>;
type TxObservable<Args extends Array<any>> = (from: SS58String, ...args: Args) => Observable<TxValidated | TxBroadcasted | TxBestChainBlockIncluded | (TxFinalized & TxSuccess)>;
type TxCall<Args extends Array<any>> = (...args: Args) => Promise<string>;
type TxSigned<Args extends Array<any>> = (from: SS58String, ...args: Args) => Promise<string>;
type TxClient<Args extends Array<any>> = {
    getCallData: TxCall<Args>;
    getTx: TxSigned<Args>;
    submit: TxFunction<Args>;
    submit$: TxObservable<Args>;
};

type EventPhase = {
    tag: "ApplyExtrinsic";
    value: number;
} | {
    tag: "Finalization";
} | {
    tag: "Initialization";
};
type EvWatch<T> = (filter?: (value: T) => boolean) => Observable<{
    meta: {
        blockHash: string;
        phase: EventPhase;
    };
    payload: T;
}>;
type EvPull<T> = () => Promise<Array<{
    meta: {
        blockHash: string;
        phase: EventPhase;
    };
    payload: T;
}>>;
type EvFilter<T> = (collection: SystemEvent["event"][]) => Array<T>;
type EvClient<T> = {
    watch: EvWatch<T>;
    pull: EvPull<T>;
    filter: EvFilter<T>;
};
type SystemEvent = {
    phase: EventPhase;
    event: {
        tag: string;
        value: {
            tag: string;
            value: any;
        };
    };
    topics: Array<any>;
};

type CreateTx = (publicKey: Uint8Array, callData: Uint8Array) => Promise<Uint8Array>;
interface JsonRpcProvider {
    send: (message: string) => void;
    createTx: CreateTx;
    disconnect: () => void;
}
type Connect = (onMessage: (value: string) => void) => JsonRpcProvider;
type StorageApi<A extends Record<string, Record<string, {
    KeyArgs: Array<any>;
    Value: any;
    IsOptional: false | true;
} | unknown>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: A[K][KK] extends {
            KeyArgs: Array<any>;
            Value: any;
            IsOptional: false | true;
        } ? StorageEntry<A[K][KK]["KeyArgs"], A[K][KK]["IsOptional"] extends true ? A[K][KK]["Value"] | undefined : A[K][KK]["Value"]> : unknown;
    };
};
type TxApi<A extends Record<string, Record<string, Array<any> | unknown>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: A[K][KK] extends Array<any> ? TxClient<A[K][KK]> : unknown;
    };
};
type EvApi<A extends Record<string, Record<string, any>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: EvClient<A[K][KK]>;
    };
};
type CreateClient = <T extends Record<string, Descriptors>>(connect: Connect, descriptors: T) => {
    finalized$: Observable<string>;
} & {
    [K in keyof T]: {
        query: StorageApi<QueryFromDescriptors<T[K]>>;
        tx: TxApi<TxFromDescriptors<T[K]>>;
        event: EvApi<EventsFromDescriptors<T[K]>>;
    };
};

declare const createClient: CreateClient;

export { type BlockHeaderWithHash, type RuntimeContext, createClient, getObservableClient };
