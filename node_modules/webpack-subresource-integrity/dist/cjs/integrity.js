"use strict";
/**
 * Copyright (c) 2015-present, Waysact Pty Ltd
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetIntegrity = void 0;
const util_1 = require("./util");
class AssetIntegrity {
    constructor(hashFuncNames) {
        /**
         * @internal
         */
        this.assetIntegrity = new Map();
        /**
         * @internal
         */
        this.inverseAssetIntegrity = new Map();
        this.hashFuncNames = hashFuncNames;
    }
    update(assetKey, integrity) {
        if (!this.assetIntegrity.has(assetKey)) {
            this.assetIntegrity.set(assetKey, integrity);
            this.inverseAssetIntegrity.set(integrity, assetKey);
        }
        return integrity;
    }
    updateHash(input, oldHash) {
        const assetKey = this.inverseAssetIntegrity.get(oldHash);
        if (assetKey && input[0]) {
            const newIntegrity = (0, util_1.computeIntegrity)(this.hashFuncNames, input[0]);
            this.inverseAssetIntegrity.delete(oldHash);
            this.assetIntegrity.delete(assetKey);
            this.update(assetKey, newIntegrity);
            return newIntegrity;
        }
        return undefined;
    }
    updateFromSource(assetKey, source) {
        return this.update(assetKey, (0, util_1.computeIntegrity)(this.hashFuncNames, source));
    }
    has(assetKey) {
        return this.assetIntegrity.has(assetKey);
    }
    get(assetKey) {
        return this.assetIntegrity.get(assetKey);
    }
}
exports.AssetIntegrity = AssetIntegrity;
//# sourceMappingURL=integrity.js.map